// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/log": {
            "post": {
                "description": "accepts json sent by the user as input and authorize it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "authenticates the user",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Authentication was successful; access_token"
                    },
                    "400": {
                        "description": "error: Failed to read body"
                    },
                    "403": {
                        "description": "fail\": \"You entered the wrong password or email"
                    }
                }
            }
        },
        "/api/auth/ping": {
            "get": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "example"
                ],
                "summary": "ping example",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "plain"
                        }
                    }
                }
            }
        },
        "/api/auth/registration": {
            "post": {
                "description": "accepts json sent by the user as input and registers it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "registers a user",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Registration was successful"
                    },
                    "400": {
                        "description": "error: Failed to read body"
                    },
                    "409": {
                        "description": "fail: This email already exists"
                    },
                    "422": {
                        "description": "fail: Your password is not valid"
                    },
                    "500": {
                        "description": "error: Error on the server. Please, try again later"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuthenticationRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "beta 0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Registration, authentication and authorization API",
	Description:      "API Server for  Gamers Assessment web-application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
